### this code was written in PYTHON

## This code was written to compare the computational amount and speed of linear search and binary search.

import numpy as np
import matplotlib.pyplot as plt
import numpy as np

a = np.arange(1000000000)

import time

def find_sequential(a,key):
    cnt = 0
    for idx in a:
        cnt += 1
        if a[idx] == key:
            return idx, cnt
    return -1


def find_binary(a,key):
    cnt = 0
    low = 0
    high = len(a) - 1
    for idx in a:
        cnt+=1
        mid = int((low + high) / 2)
        if a[mid] > key:
            high = mid
        elif(a[mid] == key):
            return mid, cnt
        else:
            low = mid
    return -1, cnt
    
    
    size_ary = range(10000,1000000,10000)
    
    sequential_time = []
sequential_count = []

for i in size_ary:
    num_array = a[:i]
    start = time.time()
    index, count = find_sequential(num_array,i-1)
    end = time.time()
    print(f'i = {i}, running time = ', end - start)
    sequential_time.append(end-start) 
    sequential_count.append(count)
    
    plt.figure(figsize=(9,4))
plt.subplot(121)
plt.title('running time')
plt.xlabel('array size')
plt.ylabel('second')
plt.plot(size_ary,sequential_time)
plt.subplot(122)
plt.title('loop count')
plt.xlabel('array size')
plt.ylabel('count')
plt.plot(size_ary,sequential_count)
plt.show()


size_ary2 = range(100,100000000,500000)

binary_cnt=[]
binary_time=[]
index_list = []
for i in size_ary2:
    num_array = a[:i]
    start = time.time()
    index, cnt = find_binary(num_array,np.random.randint(i))
    binary_cnt.append(cnt)
    end = time.time()
    print(f'cnt = {cnt}, running time = ', end - start)
    binary_time.append(end-start)  


plt.figure(figsize=(9,4))
plt.subplot(122)
plt.title('Binary search count')
plt.xlabel('array size')
plt.ylabel('counts')
plt.plot(size_ary2,binary_cnt,label='loop count')
plt.plot(size_ary2,np.log2(size_ary2),label='log2(x)',linewidth=4)
plt.legend(loc='lower right')
plt.subplot(121)
plt.title('Binary search running time')
plt.xlabel('array size')
plt.ylabel('seconds')
plt.plot(size_ary2, binary_time)
plt.ylim(-0.01,0.1)
plt.show()
