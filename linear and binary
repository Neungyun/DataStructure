###THIS CODE WAS WRITTEN IN C CODE###
########################################################
###  한국항공대학교 자료구조 수업                     ###
###  포인터를 이용해 배열의 크기를 줄이면서 선형검색과 ###
###  이분검색의 속도차이를 비교해보았습니다.           ### 
#########################################################



#include<stdio.h>
#include<time.h>
#include<stdlib.h>



int find_binary(int a[], int n, int key) {
	int low = 0;
	int high = n - 1;
	int mid;
	int cnt = 0;
	while (low <= high) {
		cnt++;
		mid = (low + high) / 2;
		if (a[mid] < key)
			low = mid + 1;
		else if (a[mid] == key)
		{
			//printf("cnt = %d\n", cnt);
			return mid;
			//return cnt;
		}
		else
			high = mid - 1;
	}
	return mid;
	//return cnt;
}


int find_linear(int a[], int n, int key) { // 배열 첫 원소의 주소와, 배열크기, 찾을 key값을 받음
	int i = 0;
	int cnt = 0; // for loop 을 몇번 돌았는지 파악하기 위해 cnt변수 설정
	for (i = 0; i < n; i++) {
		cnt++; // for loop에 들어올때마다 cnt에 1을 더한다
		if (a[i] == key) {
			//printf("loop_count in find_linear function = %d\n", cnt);
			return i;//key값을 찾으면 cnt값을 출력하고 i값을 반환한다.
		}
	}
	return -1; // 값이 없으면 -1을 반환한다.
}





int main() {
	int find_num = 499999999;
	int index1 = 0, index2 = 0;
	int ary[500000000];
	int* tmp_array;
	int tmp_idx = 0;
	int tmp_idx_array[50];
	int linear_search_time[50];
	int find_num_array[50];
	int size_of_array[50];
	int binary_search_array[50];
	clock_t start0, finish0, start1, finish1, start2, finish2;

	printf("array_size = %d\n", sizeof(ary) / sizeof(int));
	printf("find_num = %d\n", find_num);
	start0 = clock();
	int cnt = 0;
	for (int i = 0; i < 500000000; i++) {
		ary[i] = i;
	}
	finish0 = clock();
	int diff0 = finish0 - start0;
	printf("array making time = %d ms\n\n", diff0);
	// make array


	/* 포인터를 이용해 배열의 크기를 줄여가며 검색시간 비교하기*/

	for (int k = 0; k < 500000000; k += 10000000)
	{
		tmp_array = ary + k;
		find_num = 499999999;
		start1 = clock();
		index1 = find_linear(tmp_array, 500000000 - k, find_num);
		finish1 = clock();

		start2 = clock();
		index2 = find_binary(tmp_array, 500000000 - k, find_num);
		finish2 = clock();
		int diff1 = finish1 - start1;
		int diff2 = finish2 - start2;
		size_of_array[tmp_idx] = 500000000 - k;
		tmp_idx_array[tmp_idx] = index1;
		find_num_array[tmp_idx] = find_num;
		linear_search_time[tmp_idx] = diff1;
		//binary_search_array[tmp_idx] = diff2; //find_binary의 return 값이 cnt일 경우
		binary_search_array[tmp_idx] = index2;  //find_binary 의 return값이 정답의 index값일 경우
		tmp_idx++;
	}

	for (int i = 0; i < 50; i++) {
		printf("배열크기: %d\n선형검색 결과 array[%d] = %d(%d ms)\n이진검색 결과 array[%d] = %d\n,----------------------------------------  \n\n"
			, size_of_array[i], tmp_idx_array[i], find_num_array[i], linear_search_time[i],binary_search_array[i], find_num_array[i]);
	}

	return 0;

}
